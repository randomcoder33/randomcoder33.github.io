{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"CovidDoc2Vec + Word2Vec","provenance":[],"authorship_tag":"ABX9TyOYME5y993eC8eRW05E7lWw"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"PwD1a2ufXZjU","executionInfo":{"status":"ok","timestamp":1609951737651,"user_tz":-330,"elapsed":1315,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}}},"source":["import pandas as pd\r\n","import numpy as np\r\n","from tqdm import tqdm\r\n","tqdm.pandas(desc=\"progress-bar\")\r\n","from gensim.models import Doc2Vec\r\n","from sklearn import utils\r\n","from sklearn.model_selection import train_test_split\r\n","import gensim\r\n","from sklearn.linear_model import LogisticRegression\r\n","from gensim.models.doc2vec import TaggedDocument\r\n","import re\r\n","import seaborn as sns\r\n","import matplotlib.pyplot as plt"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"ick8sCweXaxJ","executionInfo":{"status":"ok","timestamp":1609953045755,"user_tz":-330,"elapsed":1055,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}}},"source":["df = pd.read_csv('COVID19FN.csv')\r\n","complete_df=df\r\n","df.head()\r\n","df = df[['Text','Label']]\r\n","df = df[pd.notnull(df['Text'])]\r\n","# df.rename(columns = {'Consumer complaint narrative':'narrative'}, inplace = True)\r\n","df\r\n"],"execution_count":38,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"00J00wgpZ5fd","executionInfo":{"status":"ok","timestamp":1609951748376,"user_tz":-330,"elapsed":1467,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}},"outputId":"359e7dc1-35b8-4f54-f27f-07d0cb95de42"},"source":["df.shape\r\n","df.index = range(2814)\r\n","df['Text'].apply(lambda x: len(x.split(' '))).sum()"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["956064"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":352},"id":"wG-zfoo3aGy3","executionInfo":{"status":"ok","timestamp":1609948573683,"user_tz":-330,"elapsed":1530,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}},"outputId":"e29ef1a7-c788-4147-a50f-b7ad0d717405"},"source":["cnt_pro = df['Label'].value_counts()\r\n","plt.figure(figsize=(12,4))\r\n","sns.barplot(cnt_pro.index, cnt_pro.values, alpha=0.8)\r\n","plt.ylabel('Number of Occurrences', fontsize=12)\r\n","plt.xlabel('Label', fontsize=12)\r\n","plt.xticks(rotation=90)\r\n","plt.show();"],"execution_count":12,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n","  FutureWarning\n"],"name":"stderr"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 864x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tCoDfqgvaanF","executionInfo":{"status":"ok","timestamp":1609948622607,"user_tz":-330,"elapsed":2327,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}},"outputId":"98a8ceec-8a6f-4347-9fe3-3878211c66cb"},"source":["def print_complaint(index):\r\n","    example = df[df.index == index][['Text', 'Label']].values[0]\r\n","    if len(example) > 0:\r\n","        print(example[0])\r\n","        print('Label:', example[1])\r\n","print_complaint(12)"],"execution_count":13,"outputs":[{"output_type":"stream","text":["Graphic contentAFP has previously debunked claims (in French) that the photograph shows a victim of hantavirus disease.AFP Fact Check ran a reverse image search on Google and traced the photograph to the Facebook account of US-based make-up artist Bridgette Trevino.“This is another kind of desease that is on board now this is from India (sic),” reads the caption on a Facebook post shared more than 5,000 times since it was published on April 14, 2020.“I created this effect by using a type of wax and fake blood. The effect being created here is called ‘trypophobia’ (fear of small holes and bumps, editor’s note). The person with this effect on their hand is my sister,” she said.A photograph shared thousands of times on Facebook purports to show the blister-covered hand of a patient suffering from a new disease. The gruesome picture is in fact the creation of a make-up artist and medical experts told AFP the claim was “nonsense”.“Here’s what I was working on earlier,” reads the caption on a post from August 2017 showing the gruesome picture. “All fake not real. All special effects makeup.”Hywel Williams, professor of dermo-epidemiology at Britain’s Nottingham University, dismissed the claims as “utter nonsense”.ShowContacted by AFP Fact Check, Trevino confirmed the photograph showed her work and rejected posts claiming it showed a disease as “fake”.The post claims that the condition is caused by the flour semolina, or “semo”, and urges people to avoid eating the wheat substance found in pasta and couscous. The accompanying photo shows a person’s hand and arm covered in red blisters.“This image is not accurate,\" said Roberto Novoa, clinical assistant professor of pathology and dermatology at Stanford University.HideFurthermore, medical experts told AFP Fact Check that eating semolina cannot cause the kind of reaction shown in the picture.\"Occasionally, people with celiac disease can develop a condition called dermatitis herpetiformis, where they develop blisters on the skin when they eat gluten-containing foods like wheat. However, it is not typically as dangerous or disfiguring as the image portrayed in the Facebook post.\"Trevino’s Facebook page features images of the hand from various angles, which you can find here and here.\n","Label: False\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"1X55dUL2ar1B"},"source":["Text Preprocessing"]},{"cell_type":"code","metadata":{"id":"gDZ-glolat81","executionInfo":{"status":"ok","timestamp":1609948671828,"user_tz":-330,"elapsed":1947,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}}},"source":["from bs4 import BeautifulSoup\r\n","def cleanText(text):\r\n","    text = BeautifulSoup(text, \"lxml\").text\r\n","    text = re.sub(r'\\|\\|\\|', r' ', text) \r\n","    text = re.sub(r'http\\S+', r'<URL>', text)\r\n","    text = text.lower()\r\n","    text = text.replace('x', '')\r\n","    return text\r\n","df['Text'] = df['Text'].apply(cleanText)"],"execution_count":14,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5Sph0ZDxa9qO","executionInfo":{"status":"ok","timestamp":1609948735895,"user_tz":-330,"elapsed":2237,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}},"outputId":"292a7730-6ce9-439c-aa62-f7e519391bf8"},"source":["import nltk\r\n","nltk.download('punkt')"],"execution_count":17,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Unzipping tokenizers/punkt.zip.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"code","metadata":{"id":"qlBAJufyamW-","executionInfo":{"status":"ok","timestamp":1609948750452,"user_tz":-330,"elapsed":10678,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}}},"source":["train, test = train_test_split(df, test_size=0.3, random_state=42)\r\n","import nltk\r\n","from nltk.corpus import stopwords\r\n","def tokenize_text(text):\r\n","    tokens = []\r\n","    for sent in nltk.sent_tokenize(text):\r\n","        for word in nltk.word_tokenize(sent):\r\n","            if len(word) < 2:\r\n","                continue\r\n","            tokens.append(word.lower())\r\n","    return tokens\r\n","train_tagged = train.apply(\r\n","    lambda r: TaggedDocument(words=tokenize_text(r['Text']), tags=[r.Label]), axis=1)\r\n","test_tagged = test.apply(\r\n","    lambda r: TaggedDocument(words=tokenize_text(r['Text']), tags=[r.Label]), axis=1)"],"execution_count":18,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N7E9SRp2a6kS","executionInfo":{"status":"ok","timestamp":1609948763767,"user_tz":-330,"elapsed":1493,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}},"outputId":"5ced8ae3-af90-42e4-85f6-1d7e39bd2d7d"},"source":["train_tagged.values[30]"],"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["TaggedDocument(words=['below', 'is', 'screenshot', 'of', 'the', 'misleading', 'video', 'the', 'who', 'listed', 'wearing', 'mask', 'as', 'one', 'prevention', 'measure', 'after', 'the', 'outbreak', 'of', 'new', 'strain', 'of', 'coronavirus', 'in', 'this', 'advice', 'sheet', 'published', 'on', 'january', '28', '2020.the', 'video', 'was', 'also', 'shared', 'here', 'here', 'and', 'here', 'on', 'weibo', 'alongside', 'similar', 'claim', 'the', 'claim', 'also', 'appears', 'in', 'the', 'form', 'of', 'an', 'infographic', 'shared', 'here', 'by', 'guangzhou', 'municipal', 'health', 'commission', 'and', 'others', 'such', 'as', 'here', 'and', 'here', 'on', 'wechat.dr', 'ho', 'added', 'attempts', 'to', 'disinfect', 'single-use', 'surgical', 'masks', 'may', 'compromise', 'it', \"'s\", 'effectiveness', 'per', 'criteria/standards', 'recommended', 'by', 'the', 'us', 'and', 'eu', 'regulatory', 'authorities', '--', 'bacterial', 'filtration', 'efficiency', 'virus', 'submicron', 'particulate', 'filtration', 'efficiency', 'splash', 'resistance', 'flame', 'spread', 'and', 'differential', 'pressure.', 'both', 'the', 'filtration', 'efficiency', 'and', 'edge-seal', 'leakage', 'of', 'face', 'mask', 'or', 'respirator', 'are', 'important', 'in', 'determining', 'the', 'eposure', 'reduction', 'mask', 'will', 'confer', 'on', 'the', 'wearer…', 'filtration', 'efficiency', 'depends', 'on', 'particle', 'size', 'charge', 'concentration', 'and', 'flow', 'rate', 'through', 'the', 'filter', 'material.', 'the', 'video', 'was', 'viewed', 'more', 'than', '60,000', 'times', 'after', 'being', 'shared', 'here', 'by', 'weibo', 'blogger', 'with', 'more', 'than', 'two', 'million', 'followers', 'on', 'january', '29', '2020.', 'however', 'the', 'use', 'of', 'mask', 'alone', 'is', 'insufficient', 'to', 'provide', 'an', 'adequate', 'level', 'of', 'protection', 'and', 'other', 'equally', 'relevant', 'measures', 'should', 'be', 'adopted', 'if', 'masks', 'are', 'to', 'be', 'used', 'this', 'measure', 'must', 'be', 'combined', 'with', 'hand', 'hygiene', 'and', 'other', 'ipc', 'measures', 'to', 'prevent', 'the', 'human-to', 'human', 'transmission', 'of', '2019-ncov.', 'video', 'of', 'purported', 'doctor', 'advising', 'people', 'to', 'steam', 'disposable', 'surgical', 'face', 'masks', 'in', 'order', 'to', 'reuse', 'them', 'has', 'been', 'viewed', 'hundreds', 'of', 'thousands', 'of', 'times', 'in', 'multiple', 'chinese-language', 'posts', 'on', 'facebook', 'weibo', 'and', 'youku', 'in', 'january', '2020.', 'the', 'posts', 'were', 'shared', 'as', 'china', 'announced', 'more', 'than', '20,000', 'people', 'have', 'been', 'infected', 'with', 'new', 'strain', 'of', 'novel', 'coronavirus', 'killing', 'at', 'least', '425', 'people', 'the', 'claim', 'in', 'the', 'posts', 'is', 'misleading', 'health', 'eperts', 'advise', 'against', 'steaming', 'surgical', 'masks', 'as', 'it', 'can', 'damage', 'them', 'they', 'also', 'warn', 'against', 'reusing', 'masks', 'as', 'harmful', 'bacteria', 'and', 'viruses', 'can', 'remain', 'on', 'their', 'surface.steaming', 'face', 'masks', 'can', 'also', 'damage', 'them', 'making', 'them', 'less', 'efficient', 'eperts', 'said.-', 'dangers', 'of', 'infection', '-under', 'the', 'masks', 'management', 'section', 'the', 'who', 'warned', 'do', 'not', 're-use', 'single-use', 'masks', 'discard', 'single-use', 'masks', 'after', 'each', 'use', 'and', 'dispose', 'of', 'them', 'immediately', 'upon', 'removal.', 'the', 'us', 'food', 'drug', 'administration', 'fda', 'also', 'eplained', 'that', 'the', 'two', 'most', 'commonly-used', 'types', 'of', 'masks', '--', 'non-woven', 'face', 'masks', 'and', 'n95', 'respirators', '--', 'should', 'not', 'be', 'reused.the', 'claim', 'is', 'misleading', 'eperts', 'advise', 'against', 'steaming', 'disposable', 'surgical', 'masks', 'as', 'it', 'can', 'damage', 'them', 'they', 'also', 'advise', 'against', 'reusing', 'the', 'masks', 'because', 'harmful', 'bacteria', 'and', 'viruses', 'can', 'remain', 'on', 'their', 'surface.the', 'advice', 'reads', 'in', 'part', 'medical', 'masks', 'are', 'surgical', 'or', 'procedure', 'masks', 'that', 'are', 'flat', 'or', 'pleated', 'some', 'are', 'like', 'cups', 'they', 'are', 'affied', 'to', 'the', 'head', 'with', 'straps', 'wearing', 'medical', 'mask', 'is', 'one', 'of', 'the', 'prevention', 'measures', 'to', 'limit', 'the', 'spread', 'of', 'certain', 'respiratory', 'diseases', 'including', '2019-', 'ncov', 'in', 'affected', 'areas.from', 'the', 'four-second', 'mark', 'man', 'wearing', 'lab', 'coat', 'described', 'as', 'infectious', 'disease', 'specialist', 'wu', 'meng', 'addresses', 'microphone', 'with', 'the', 'guangzhou', 'g4', 'sign', 'on', 'it', 'speaking', 'in', 'mandarin', 'he', 'states', 'that', 'people', 'can', 'reuse', 'disposable', 'surgical', 'face', 'mask', 'after', 'steaming', 'it', 'at', '100', 'degrees', 'celsius', 'for', 'just', 'over', 'ten', 'minutes.the', 'new', 'strain', 'of', 'coronavirus', 'which', 'emerged', 'from', 'the', 'central', 'chinese', 'city', 'of', 'china', 'in', 'late', '2019', 'has', 'killed', 'at', 'least', '425', 'people', 'in', 'china', 'and', 'infected', 'more', 'than', '20,000', 'people', 'as', 'reported', 'here', 'by', 'afp', 'on', 'february', '2020.he', 'states', 'that', 'mask', 'can', 'be', 'reused', 'up', 'to', 'five', 'times', 'as', 'long', 'as', 'it', 'has', 'not', 'been', 'worn', 'at', 'high-risk', 'locations', 'such', 'as', 'hospitals', 'he', 'also', 'warns', 'people', 'against', 'using', 'microwaves', 'or', 'ovens', 'to', 'heat', 'their', 'masks.tet', 'superimposed', 'on', 'the', 'image', 'of', 'pot', 'at', 'the', 'beginning', 'of', 'the', 'video', 'can', 'be', 'translated', 'from', 'simplified', 'chinese', 'to', 'english', 'as', 'sterilise', '10', 'minutes', 'with', 'steam', 'at', '100', 'degrees', 'celsius', '.her', 'claim', 'prompted', 'hong', \"kong's\", 'centre', 'for', 'health', 'protection', 'adviser', 'dr.', 'wong', 'ka-hing', 'to', 'state', 'that', 'surgical', 'masks', 'should', 'only', 'be', 'used', 'once', 'hong', 'kong', 'public', 'broadcaster', 'rthk', 'reported', 'here', 'on', 'january', '29.the', '57-second', 'clip', 'features', 'the', 'logos', 'of', 'guangzhou', 'broadcasting', 'network', 'gzbn', 'television', 'network', 'in', 'the', 'southern', 'chinese', 'city', 'of', 'guangzhou', 'and', 'hua', 'cheng', 'fm', 'an', 'app', 'that', 'allows', 'the', 'streaming', 'of', 'four', 'gzbn', 'live', 'programmes.-', 'damaging', 'face', 'masks', '--', 'single-use', 'masks', '-at', 'the', 'beginning', 'of', 'the', 'video', 'the', 'douyin', 'handle', 'g4foru', 'can', 'be', 'seen', 'at', 'the', 'top', 'left-hand', 'corner', 'this', 'account', 'belongs', 'to', 'guangzhou', 'g4', 'gzbn', 'news', 'and', 'current', 'affairs', 'programme.the', 'hong', 'kong', 'red', 'cross', 'and', 'centre', 'for', 'health', 'protection', 'also', 'issued', 'stern', 'warning', 'against', 'the', 'reuse', 'of', 'face', 'masks', 'on', 'january', '30', 'seen', 'here', 'and', 'here', 'on', 'facebook.he', 'stated', 'the', 'cru', 'of', 'the', 'matter', 'is', 'not', 'whether', 'viruses', 'can', 'be', 'killed', 'by', 'steaming', 'uv', 'light', 'microwave', 'etc', 'once', 'surgical', 'mask', 'is', 'worn', 'it', 'may', 'be', 'contaminated', 'by', 'your', 'own/and', 'other', \"'s\", 'virus/bacteria', 'containing', 'saliva', 'nasal', 'secretion', 'and', 'sputum', 'just', 'like', 'tissue', 'papers', 'which', 'are', 'meant', 'to', 'be', 'single-use', 'items', 'if', 'you', 'sneeze', 'onto', 'tissue', 'paper', 'it', 'is', 'soiled', 'you', 'wo', \"n't\", 'ask', 'people', 'to', 'steam', 'it', 'air', 'dry', 'it', 'and', 're-use', 'it', 'second', 'or', 'third', 'time', 'this', 'is', 'not', 'logical', 'way', 'of', 'resolving', 'shortage', 'of', 'disposable', 'surgical', 'masks', 'any', 'handling', 'to', 'reuse', 'may', 'lead', 'to', 'self', 'inoculation', 'by', 'the', 'viruses/bacteria', 'on', 'the', 'surfaces.', 'in', 'hong', 'kong', 'the', 'same', 'misleading', 'video', 'about', 'steaming', 'face', 'masks', 'was', 'viewed', 'almost', '900,000', 'times', 'within', 'day', 'after', 'pro-beijing', 'lawmaker', 'ann', 'chiang', 'shared', 'it', 'here', 'on', 'her', 'facebook', 'account', 'on', 'january', '30', 'alongside', 'this', 'caption', 'when', 'masks', 'are', 'in', 'short', 'supply', 'steaming', 'at', 'high', 'temperature', 'can', 'sterilise', 'them', 'and', 'provide', 'quick', 'fi.', 'facemasks', 'are', 'not', 'intended', 'to', 'be', 'used', 'more', 'than', 'once…', 'all', 'fda-cleared', 'n95', 'respirators', 'are', 'labeled', 'as', 'single', 'use', 'disposable', 'devices', 'the', 'fda', 'wrote', 'here', 'on', 'its', 'website.a', 'who', 'spokesperson', 'said', '``', 'steam', 'can', 'potentially', 'compromise', 'the', 'filter', 'efficiency.', 'the', 'world', 'health', 'organisation', 'who', 'has', 'declared', 'the', 'outbreak', 'global', 'emergency', 'after', 'it', 'reached', 'at', 'least', '24', 'countries.dr', 'ho', 'pak-leung', 'microbiologist', 'and', 'director', 'of', 'the', 'centre', 'for', 'infection', 'at', 'the', 'university', 'of', 'hong', 'kong', 'described', 'the', 'video', 'in', 'the', 'misleading', 'post', 'as', 'fake', 'news', 'in', 'an', 'email', 'to', 'afp', 'on', 'january', '30.health', 'eperts', 'said', 'reusing', 'surgical', 'face', 'mask', 'can', 'inadvertently', 'lead', 'to', 'self-inoculation'], tags=[False])"]},"metadata":{"tags":[]},"execution_count":19}]},{"cell_type":"code","metadata":{"id":"ODEP--acbJBn","executionInfo":{"status":"ok","timestamp":1609948781509,"user_tz":-330,"elapsed":1240,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}}},"source":["import multiprocessing\r\n","cores = multiprocessing.cpu_count()"],"execution_count":20,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RgsXHEdXbNan","executionInfo":{"status":"ok","timestamp":1609948846074,"user_tz":-330,"elapsed":4877,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}},"outputId":"7e6fa28b-734d-46d4-ead3-7655ae580601"},"source":["model_dbow = Doc2Vec(dm=0, vector_size=300, negative=5, hs=0, min_count=2, sample = 0, workers=cores)\r\n","model_dbow.build_vocab([x for x in tqdm(train_tagged.values)])"],"execution_count":21,"outputs":[{"output_type":"stream","text":["100%|██████████| 1969/1969 [00:00<00:00, 1421932.61it/s]\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jLzGYJitbcSF","executionInfo":{"status":"ok","timestamp":1609948891284,"user_tz":-330,"elapsed":31456,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}},"outputId":"1c11c928-0649-4bc3-8207-f75931684364"},"source":["for epoch in range(30):\r\n","    model_dbow.train(utils.shuffle([x for x in tqdm(train_tagged.values)]), total_examples=len(train_tagged.values), epochs=1)\r\n","    model_dbow.alpha -= 0.002\r\n","    model_dbow.min_alpha = model_dbow.alpha"],"execution_count":22,"outputs":[{"output_type":"stream","text":["100%|██████████| 1969/1969 [00:00<00:00, 1487229.35it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 633278.47it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 2407048.84it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 690748.12it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 2118128.90it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 363654.10it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 471245.91it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 720770.17it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 496637.48it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 338078.62it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 1459629.65it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 2276973.97it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 1483489.24it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 773420.54it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 309460.96it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 384370.50it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 290928.40it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 1410277.42it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 398580.34it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 1649737.23it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 649872.88it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 1676869.96it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 539600.43it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 2424004.87it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 2203464.40it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 543506.72it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 360510.94it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 847903.96it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 474413.18it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 1514225.26it/s]\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"a9xpD7h_bg1x","executionInfo":{"status":"ok","timestamp":1609948935506,"user_tz":-330,"elapsed":1549,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}}},"source":["def vec_for_learning(model, tagged_docs):\r\n","    sents = tagged_docs.values\r\n","    targets, regressors = zip(*[(doc.tags[0], model.infer_vector(doc.words, steps=20)) for doc in sents])\r\n","    return targets, regressors\r\n","def vec_for_learning(model, tagged_docs):\r\n","    sents = tagged_docs.values\r\n","    targets, regressors = zip(*[(doc.tags[0], model.infer_vector(doc.words, steps=20)) for doc in sents])\r\n","    return targets, regressors"],"execution_count":24,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YAVSuNRvbtSy","executionInfo":{"status":"ok","timestamp":1609948982449,"user_tz":-330,"elapsed":32252,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}},"outputId":"e2bc4716-2f16-4c05-976a-99ed665d9535"},"source":["y_train, X_train = vec_for_learning(model_dbow, train_tagged)\r\n","y_test, X_test = vec_for_learning(model_dbow, test_tagged)\r\n","logreg = LogisticRegression(n_jobs=1, C=1e5)\r\n","logreg.fit(X_train, y_train)\r\n","y_pred = logreg.predict(X_test)\r\n","from sklearn.metrics import accuracy_score, f1_score\r\n","print('Testing accuracy %s' % accuracy_score(y_test, y_pred))\r\n","print('Testing F1 score: {}'.format(f1_score(y_test, y_pred, average='weighted')))"],"execution_count":25,"outputs":[{"output_type":"stream","text":["Testing accuracy 0.8011834319526627\n","Testing F1 score: 0.7961445801442288\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IRN1rnaMb25n","executionInfo":{"status":"ok","timestamp":1609949011104,"user_tz":-330,"elapsed":8963,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}},"outputId":"7815c844-00b4-4670-a25a-eeb5ab548a09"},"source":["model_dmm = Doc2Vec(dm=1, dm_mean=1, vector_size=300, window=10, negative=5, min_count=1, workers=5, alpha=0.065, min_alpha=0.065)\r\n","model_dmm.build_vocab([x for x in tqdm(train_tagged.values)])"],"execution_count":26,"outputs":[{"output_type":"stream","text":["100%|██████████| 1969/1969 [00:00<00:00, 1078284.97it/s]\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"75-ptVIMcDlX","executionInfo":{"status":"ok","timestamp":1609949081552,"user_tz":-330,"elapsed":58883,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}},"outputId":"a3f3d657-25dc-4a63-b7c4-94ec7026c02e"},"source":["for epoch in range(30):\r\n","    model_dmm.train(utils.shuffle([x for x in tqdm(train_tagged.values)]), total_examples=len(train_tagged.values), epochs=1)\r\n","    model_dmm.alpha -= 0.002\r\n","    model_dmm.min_alpha = model_dmm.alpha"],"execution_count":27,"outputs":[{"output_type":"stream","text":["100%|██████████| 1969/1969 [00:00<00:00, 1368901.80it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 758851.84it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 2153477.07it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 1517843.15it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 2440480.08it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 2613476.13it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 504741.75it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 2270089.22it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 464827.18it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 2342196.42it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 2275092.17it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 491143.89it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 335183.43it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 473135.75it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 287185.19it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 2373156.49it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 2559214.31it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 2462309.06it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 1478443.35it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 413528.85it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 2373838.62it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 310811.96it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 1534482.46it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 345489.65it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 314984.73it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 1322219.75it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 1535338.27it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 2255211.52it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 1487765.19it/s]\n","100%|██████████| 1969/1969 [00:00<00:00, 2181348.28it/s]\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TLJ3y-BacIl4","executionInfo":{"status":"ok","timestamp":1609949145329,"user_tz":-330,"elapsed":52521,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}},"outputId":"89ebeafb-4069-4ef3-83dd-0aa3fbbc657a"},"source":["y_train, X_train = vec_for_learning(model_dmm, train_tagged)\r\n","y_test, X_test = vec_for_learning(model_dmm, test_tagged)\r\n","logreg.fit(X_train, y_train)\r\n","y_pred = logreg.predict(X_test)\r\n","print('Testing accuracy %s' % accuracy_score(y_test, y_pred))\r\n","print('Testing F1 score: {}'.format(f1_score(y_test, y_pred, average='weighted')))"],"execution_count":28,"outputs":[{"output_type":"stream","text":["Testing accuracy 0.7881656804733728\n","Testing F1 score: 0.7891473741302583\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JI9CGxqacZtt","executionInfo":{"status":"ok","timestamp":1609949491570,"user_tz":-330,"elapsed":34788,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}},"outputId":"6d5adebe-dcd5-4c35-aa56-4b89bbd0034e"},"source":["from sklearn.ensemble import GradientBoostingClassifier\r\n","from sklearn.ensemble import RandomForestClassifier \r\n","\r\n","y_train, X_train = vec_for_learning(model_dbow, train_tagged)\r\n","y_test, X_test = vec_for_learning(model_dbow, test_tagged)\r\n","gbc = GradientBoostingClassifier(random_state=0)  ## Testing accuracy 0.7940828402366864  Testing F1 score: 0.7912708400108278\r\n","regressor = RandomForestClassifier(n_estimators = 100)  ## Testing accuracy 0.8011834319526627 Testing F1 score: 0.796658931074995\r\n","logreg = LogisticRegression(n_jobs=1, C=1e5)  ## Testing accuracy 0.8011834319526627 Testing F1 score: 0.7961445801442288\r\n","regressor.fit(X_train, y_train)\r\n","y_pred = regressor.predict(X_test)\r\n","from sklearn.metrics import accuracy_score, f1_score\r\n","print('Testing accuracy %s' % accuracy_score(y_test, y_pred))\r\n","print('Testing F1 score: {}'.format(f1_score(y_test, y_pred, average='weighted')))"],"execution_count":30,"outputs":[{"output_type":"stream","text":["Testing accuracy 0.8011834319526627\n","Testing F1 score: 0.796658931074995\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"u1av0_nRdcQN","executionInfo":{"status":"ok","timestamp":1609949789345,"user_tz":-330,"elapsed":52007,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}},"outputId":"70e72550-cfb5-4918-e235-5f78cb5d4961"},"source":["from sklearn.ensemble import GradientBoostingClassifier\r\n","from sklearn.ensemble import RandomForestClassifier \r\n","\r\n","y_train, X_train = vec_for_learning(model_dmm, train_tagged)\r\n","y_test, X_test = vec_for_learning(model_dmm, test_tagged)\r\n","gbc = GradientBoostingClassifier(random_state=0)  ## Testing accuracy 0.8011834319526627 Testing F1 score: 0.7971480845157628\r\n","regressor = RandomForestClassifier(n_estimators = 100) ## Testing accuracy 0.7538461538461538 Testing F1 score: 0.7467090217878861\r\n","logreg = LogisticRegression(n_jobs=1, C=1e5)  ## Testing accuracy 0.7526627218934911 Testing F1 score: 0.7538293858630177  \r\n","logreg.fit(X_train, y_train)\r\n","y_pred = logreg.predict(X_test)\r\n","from sklearn.metrics import accuracy_score, f1_score\r\n","print('Testing accuracy %s' % accuracy_score(y_test, y_pred))\r\n","print('Testing F1 score: {}'.format(f1_score(y_test, y_pred, average='weighted')))"],"execution_count":33,"outputs":[{"output_type":"stream","text":["Testing accuracy 0.7526627218934911\n","Testing F1 score: 0.7538293858630177\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"_5rEdKtke6f9"},"source":["Concatenate two models."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tw6oGUe6e7rt","executionInfo":{"status":"ok","timestamp":1609949868812,"user_tz":-330,"elapsed":5031,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}},"outputId":"40ccc3fd-6691-4702-d1d1-ab9f3d9ae309"},"source":["!pip install testfixtures\r\n","from gensim.test.test_doc2vec import ConcatenatedDoc2Vec\r\n","new_model = ConcatenatedDoc2Vec([model_dbow, model_dmm])"],"execution_count":35,"outputs":[{"output_type":"stream","text":["Collecting testfixtures\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/f7/82/7d7710234bfd18b69a21f65d77c55618e16a80bc333801c0f4dbbfb7324c/testfixtures-6.17.0-py2.py3-none-any.whl (95kB)\n","\r\u001b[K     |███▌                            | 10kB 19.0MB/s eta 0:00:01\r\u001b[K     |███████                         | 20kB 24.0MB/s eta 0:00:01\r\u001b[K     |██████████▍                     | 30kB 10.4MB/s eta 0:00:01\r\u001b[K     |█████████████▉                  | 40kB 8.7MB/s eta 0:00:01\r\u001b[K     |█████████████████▎              | 51kB 4.3MB/s eta 0:00:01\r\u001b[K     |████████████████████▊           | 61kB 4.5MB/s eta 0:00:01\r\u001b[K     |████████████████████████▏       | 71kB 5.0MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▋    | 81kB 5.3MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████ | 92kB 5.5MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 102kB 3.8MB/s \n","\u001b[?25hInstalling collected packages: testfixtures\n","Successfully installed testfixtures-6.17.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"aE7MrMZReIjN","executionInfo":{"status":"ok","timestamp":1609949874051,"user_tz":-330,"elapsed":1339,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}}},"source":["def get_vectors(model, tagged_docs):\r\n","    sents = tagged_docs.values\r\n","    targets, regressors = zip(*[(doc.tags[0], model.infer_vector(doc.words, steps=20)) for doc in sents])\r\n","    return targets, regressors"],"execution_count":36,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KBYYTRaqfDAg","executionInfo":{"status":"ok","timestamp":1609950256060,"user_tz":-330,"elapsed":122534,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}},"outputId":"061e3610-8eec-4a17-81ba-b1bc45034e00"},"source":["from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\r\n","y_train, X_train = get_vectors(new_model, train_tagged)\r\n","y_test, X_test = get_vectors(new_model, test_tagged)\r\n","gbc = GradientBoostingClassifier(random_state=0)  ## Testing accuracy 0.8059171597633136 Testing F1 score: 0.800649669540553\r\n","regressor = RandomForestClassifier(n_estimators = 100) ## Testing accuracy 0.7905325443786982 Testing F1 score: 0.7906365950497332\r\n","logreg = LogisticRegression(n_jobs=1, C=1e5)  ## Testing accuracy 0.8047337278106509 Testing F1 score: 0.805084937456924  \r\n","gbc.fit(X_train, y_train)\r\n","y_pred = gbc.predict(X_test)\r\n","from sklearn.metrics import accuracy_score, f1_score\r\n","print('Testing accuracy %s' % accuracy_score(y_test, y_pred))\r\n","print('Testing F1 score: {}'.format(f1_score(y_test, y_pred, average='weighted')))"],"execution_count":39,"outputs":[{"output_type":"stream","text":["Testing accuracy 0.8059171597633136\n","Testing F1 score: 0.800649669540553\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"yHGd24scjE-L"},"source":["Word2Vec"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hwCBkt9iffSQ","executionInfo":{"status":"ok","timestamp":1609951725736,"user_tz":-330,"elapsed":1734,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}},"outputId":"34183847-87b1-4610-e464-150bfebfcbfa"},"source":["import os\r\n","import nltk\r\n","nltk.download('stopwords')\r\n","import gensim"],"execution_count":1,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3LQWyKeFjDqe","executionInfo":{"status":"ok","timestamp":1609950988657,"user_tz":-330,"elapsed":27511,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}},"outputId":"91179796-d314-4cb4-cd47-aa1785c69fb7"},"source":["!brew install wget\r\n","\r\n","!wget -c \"https://s3.amazonaws.com/dl4j-distribution/GoogleNews-vectors-negative300.bin.gz\""],"execution_count":43,"outputs":[{"output_type":"stream","text":["/bin/bash: brew: command not found\n","--2021-01-06 16:36:01--  https://s3.amazonaws.com/dl4j-distribution/GoogleNews-vectors-negative300.bin.gz\n","Resolving s3.amazonaws.com (s3.amazonaws.com)... 52.216.29.182\n","Connecting to s3.amazonaws.com (s3.amazonaws.com)|52.216.29.182|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 1647046227 (1.5G) [application/x-gzip]\n","Saving to: ‘GoogleNews-vectors-negative300.bin.gz’\n","\n","GoogleNews-vectors- 100%[===================>]   1.53G  68.9MB/s    in 26s     \n","\n","2021-01-06 16:36:27 (60.5 MB/s) - ‘GoogleNews-vectors-negative300.bin.gz’ saved [1647046227/1647046227]\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"9HdNTPqHjKMh","executionInfo":{"status":"ok","timestamp":1609951445073,"user_tz":-330,"elapsed":105222,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}}},"source":["from gensim import models\r\n","\r\n","embeddings  = models.KeyedVectors.load_word2vec_format('GoogleNews-vectors-negative300.bin.gz', binary=True)"],"execution_count":45,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":103},"id":"uJTz3R2PkAze","executionInfo":{"status":"ok","timestamp":1609952924406,"user_tz":-330,"elapsed":1311,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}},"outputId":"5861d2e2-cc61-4afe-c955-430aa0c47839"},"source":["df\r\n","\r\n","df.loc[0, 'Text']"],"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'Circulating on social networks a video that shows an excerpt from a Spanish television show, supposedly issued December 24, 2019, in which it appears a woman (who claims to be psychic) ??to make \"predictions\". In this video, the woman describes a set of events that have been interpreted as a detailed forecast of Covid-19 pandemic that has hit the world. It is, however, a fake video, at least as regards the date of issue. The video has been being disseminated on the Internet with a date and not tampered with the real.'"]},"metadata":{"tags":[]},"execution_count":35}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":402},"id":"_N0P8WQwlaQV","executionInfo":{"status":"ok","timestamp":1609953164509,"user_tz":-330,"elapsed":7996,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}},"outputId":"bf7ebf3a-9186-45ad-f00b-17e21d762da9"},"source":["stopwords = nltk.corpus.stopwords.words('english') # removing stop words\r\n","docs_vectors=pd.DataFrame()\r\n","for doc in complete_df['Text'].str.lower().str.replace('[^a-z ]', ''): # looping through each document and cleaning it\r\n","    temp = pd.DataFrame()  # creating a temporary dataframe(store value for 1st doc & for 2nd doc remove the details of 1st & proced through 2nd and so on..)\r\n","    doc=str(doc)\r\n","    for word in doc.split(' '): # looping through each word of a single document and spliting through space\r\n","        if word not in stopwords: # if word is not present in stopwords then (try)\r\n","            try:\r\n","                word_vec = embeddings[word] # if word is present in embeddings(goole provides weights associate with words(300)) then proceed\r\n","                temp = temp.append(pd.Series(word_vec), ignore_index = True) # if word is present then append it to temporary dataframe\r\n","            except:\r\n","                pass\r\n","    doc_vector = temp.mean() # take the average of each column(w0, w1, w2,........w300)\r\n","    docs_vectors = docs_vectors.append(doc_vector, ignore_index = True) # append each document value to the final dataframe\r\n","docs_vectors"],"execution_count":42,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","    </tr>\n","    <tr>\n","      <th>2816</th>\n","    </tr>\n","    <tr>\n","      <th>2817</th>\n","    </tr>\n","    <tr>\n","      <th>2818</th>\n","    </tr>\n","    <tr>\n","      <th>2819</th>\n","    </tr>\n","    <tr>\n","      <th>2820</th>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2821 rows × 0 columns</p>\n","</div>"],"text/plain":["Empty DataFrame\n","Columns: []\n","Index: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]\n","\n","[2821 rows x 0 columns]"]},"metadata":{"tags":[]},"execution_count":42}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3_LP-GBnlnRV","executionInfo":{"status":"ok","timestamp":1609954010661,"user_tz":-330,"elapsed":1362,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}},"outputId":"d93ff7a1-06a4-43d9-872c-f906bf018f9e"},"source":["docs_vectors['Text']=complete_df['Text']\r\n","docs_vectors['Label']=complete_df['Label']\r\n","pd.isnull(docs_vectors).sum().sum()"],"execution_count":70,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{"tags":[]},"execution_count":70}]},{"cell_type":"code","metadata":{"id":"RduPJO3znGOM","executionInfo":{"status":"ok","timestamp":1609954020456,"user_tz":-330,"elapsed":994,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}}},"source":["docs_vectors = docs_vectors.dropna()"],"execution_count":71,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mpsmBXoonOpU","executionInfo":{"status":"ok","timestamp":1609954024112,"user_tz":-330,"elapsed":1263,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}},"outputId":"59986bb2-d639-4ab5-ccca-308af0205203"},"source":["from sklearn.model_selection import train_test_split\r\n","from sklearn.ensemble import AdaBoostClassifier\r\n","\r\n","train_x, test_x, train_y, test_y = train_test_split(docs_vectors.drop('Label', axis = 1),\r\n","                                                   docs_vectors['Label'],\r\n","                                                   test_size = 0.2,\r\n","                                                   random_state = 1)\r\n","train_x.shape, train_y.shape, test_x.shape, test_y.shape\r\n","train_y=train_y.astype('int')\r\n","test_y=test_y.astype('int')\r\n","# print(train_x)\r\n","print(train_y)\r\n","# print(test_x)\r\n","# print(test_y)"],"execution_count":72,"outputs":[{"output_type":"stream","text":["2536    1\n","2683    1\n","219     1\n","257     1\n","885     1\n","       ..\n","2770    1\n","905     1\n","1096    1\n","235     1\n","1061    1\n","Name: Label, Length: 2251, dtype: int64\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":425},"id":"p5QhwlQfnXHZ","executionInfo":{"status":"error","timestamp":1609954069652,"user_tz":-330,"elapsed":3596,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}},"outputId":"032c632c-327b-4f66-94ea-f67d6ccd17df"},"source":["from sklearn.ensemble import GradientBoostingClassifier\r\n","from sklearn.ensemble import RandomForestClassifier \r\n","\r\n","gbc = GradientBoostingClassifier(random_state=0)  ## Testing accuracy 0.8011834319526627 Testing F1 score: 0.7971480845157628\r\n","regressor = RandomForestClassifier(n_estimators = 100) ## Testing accuracy 0.7538461538461538 Testing F1 score: 0.7467090217878861\r\n","logreg = LogisticRegression(n_jobs=1, C=1e5)  ## Testing accuracy 0.7526627218934911 Testing F1 score: 0.7538293858630177  \r\n","regressor.fit(train_x, train_y)\r\n","y_pred = regressor.predict(test_x)\r\n","from sklearn.metrics import accuracy_score, f1_score\r\n","print('Testing accuracy %s' % accuracy_score(test_y, y_pred))\r\n","print('Testing F1 score: {}'.format(f1_score(test_y, y_pred, average='weighted')))"],"execution_count":74,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-74-c8338cfb28ca>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mregressor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mRandomForestClassifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_estimators\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m## Testing accuracy 0.7538461538461538 Testing F1 score: 0.7467090217878861\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mlogreg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLogisticRegression\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mC\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1e5\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m## Testing accuracy 0.7526627218934911 Testing F1 score: 0.7538293858630177\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0mregressor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_x\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_y\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mregressor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_x\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmetrics\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0maccuracy_score\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mf1_score\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    293\u001b[0m         \"\"\"\n\u001b[1;32m    294\u001b[0m         \u001b[0;31m# Validate or convert input data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 295\u001b[0;31m         \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccept_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"csc\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mDTYPE\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    296\u001b[0m         \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccept_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'csc'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mensure_2d\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    297\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0msample_weight\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, warn_on_dtype, estimator)\u001b[0m\n\u001b[1;32m    529\u001b[0m                     \u001b[0marray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcasting\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"unsafe\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    530\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 531\u001b[0;31m                     \u001b[0marray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    532\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mComplexWarning\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    533\u001b[0m                 raise ValueError(\"Complex data not supported\\n\"\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/numpy/core/_asarray.py\u001b[0m in \u001b[0;36masarray\u001b[0;34m(a, dtype, order)\u001b[0m\n\u001b[1;32m     81\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     82\u001b[0m     \"\"\"\n\u001b[0;32m---> 83\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     84\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     85\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__array__\u001b[0;34m(self, dtype)\u001b[0m\n\u001b[1;32m   1779\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1780\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__array__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1781\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_values\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1782\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1783\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__array_wrap__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcontext\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/numpy/core/_asarray.py\u001b[0m in \u001b[0;36masarray\u001b[0;34m(a, dtype, order)\u001b[0m\n\u001b[1;32m     81\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     82\u001b[0m     \"\"\"\n\u001b[0;32m---> 83\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     84\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     85\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: could not convert string to float: 'Scientists rush to find ‘Patient Zero’ in a bid to stop the coronavirus'"]}]},{"cell_type":"code","metadata":{"id":"Lq6v9i31nZ-O","executionInfo":{"status":"aborted","timestamp":1609952581466,"user_tz":-330,"elapsed":7250,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}}},"source":[""],"execution_count":null,"outputs":[]}]}