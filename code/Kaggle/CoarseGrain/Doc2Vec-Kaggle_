{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Doc2Vec-Kaggle ","provenance":[{"file_id":"1-m3FtG4CDG2B9FrQCl7FjLcmntryV3CP","timestamp":1609950462918}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"PwD1a2ufXZjU"},"source":["import pandas as pd\r\n","import numpy as np\r\n","from tqdm import tqdm\r\n","tqdm.pandas(desc=\"progress-bar\")\r\n","from gensim.models import Doc2Vec\r\n","from sklearn import utils\r\n","from sklearn.model_selection import train_test_split\r\n","import gensim\r\n","from sklearn.linear_model import LogisticRegression\r\n","from gensim.models.doc2vec import TaggedDocument\r\n","import re\r\n","import seaborn as sns\r\n","import matplotlib.pyplot as plt"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ick8sCweXaxJ"},"source":["from google.colab import files\r\n","files.upload()\r\n","\r\n","!pip install -q kaggle\r\n","!mkdir -p ~/.kaggle\r\n","!cp kaggle.json ~/.kaggle/\r\n","!chmod 600 /root/.kaggle/kaggle.json\r\n","!kaggle datasets download -d clmentbisaillon/fake-and-real-news-dataset\r\n","\r\n","import zipfile\r\n","with zipfile.ZipFile('./fake-and-real-news-dataset.zip', 'r') as zip_ref:\r\n","    zip_ref.extractall('./')\r\n","\r\n","fake=pd.read_csv('Fake.csv')\r\n","category=['FALSE']*(23481)\r\n","fake['Category']=category\r\n","fake.head()\r\n","\r\n","true=pd.read_csv('True.csv')\r\n","category=['TRUE']*(21417)\r\n","true['Category']=category\r\n","true.head()\r\n","\r\n","tot=true.head(2500).append(fake.head(2500),ignore_index=True)\r\n","df=tot\r\n","df.head()\r\n","\r\n","# df = pd.read_csv('COVID19FN.csv')\r\n","# df.head()\r\n","df = df[['text','Category']]\r\n","df = df[pd.notnull(df['text'])]\r\n","# # df.rename(columns = {'Consumer complaint narrative':'narrative'}, inplace = True)\r\n","# df"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"00J00wgpZ5fd","executionInfo":{"status":"ok","timestamp":1609950705763,"user_tz":-330,"elapsed":1393,"user":{"displayName":"Viren Kathiriya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVzqjQWWgJbKaLmG0OVHY6kjVbYoEWYa-NjveK0hs=s64","userId":"10657160422125025312"}},"outputId":"9bf49a6b-2cde-4b79-ba15-a4e6ad54713e"},"source":["df.shape\r\n","df.index = range(5000)\r\n","df['text'].apply(lambda x: len(x.split(' '))).sum()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2057946"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":356},"id":"wG-zfoo3aGy3","executionInfo":{"status":"ok","timestamp":1609950721217,"user_tz":-330,"elapsed":1224,"user":{"displayName":"Viren Kathiriya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVzqjQWWgJbKaLmG0OVHY6kjVbYoEWYa-NjveK0hs=s64","userId":"10657160422125025312"}},"outputId":"c1db36c9-b3c6-44d3-dc4f-655999f35cd9"},"source":["cnt_pro = df['Category'].value_counts()\r\n","plt.figure(figsize=(12,4))\r\n","sns.barplot(cnt_pro.index, cnt_pro.values, alpha=0.8)\r\n","plt.ylabel('Number of Occurrences', fontsize=12)\r\n","plt.xlabel('Category', fontsize=12)\r\n","plt.xticks(rotation=90)\r\n","plt.show();"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n","  FutureWarning\n"],"name":"stderr"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 864x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tCoDfqgvaanF","executionInfo":{"status":"ok","timestamp":1609950741191,"user_tz":-330,"elapsed":1240,"user":{"displayName":"Viren Kathiriya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVzqjQWWgJbKaLmG0OVHY6kjVbYoEWYa-NjveK0hs=s64","userId":"10657160422125025312"}},"outputId":"efeb2400-04af-493b-d3ba-a5e99ffe6388"},"source":["def print_complaint(index):\r\n","    example = df[df.index == index][['text', 'Category']].values[0]\r\n","    if len(example) > 0:\r\n","        print(example[0])\r\n","        print('Category:', example[1])\r\n","print_complaint(12)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["The following statements were posted to the verified Twitter accounts of U.S. President Donald Trump, @realDonaldTrump and @POTUS.  The opinions expressed are his own. Reuters has not edited the statements or confirmed their accuracy.  @realDonaldTrump : - Vanity Fair, which looks like it is on its last legs, is bending over backwards in apologizing for the minor hit they took at Crooked H. Anna Wintour, who was all set to be Amb to Court of St James’s & a big fundraiser for CH, is beside herself in grief & begging for forgiveness! [1024 EST] -- Source link: (bit.ly/2jBh4LU) (bit.ly/2jpEXYR) \n","Category: TRUE\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"1X55dUL2ar1B"},"source":["Text Preprocessing"]},{"cell_type":"code","metadata":{"id":"gDZ-glolat81"},"source":["from bs4 import BeautifulSoup\r\n","def cleanText(text):\r\n","    text = BeautifulSoup(text, \"lxml\").text\r\n","    text = re.sub(r'\\|\\|\\|', r' ', text) \r\n","    text = re.sub(r'http\\S+', r'<URL>', text)\r\n","    text = text.lower()\r\n","    text = text.replace('x', '')\r\n","    return text\r\n","df['text'] = df['text'].apply(cleanText)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5Sph0ZDxa9qO","executionInfo":{"status":"ok","timestamp":1609950763093,"user_tz":-330,"elapsed":3153,"user":{"displayName":"Viren Kathiriya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVzqjQWWgJbKaLmG0OVHY6kjVbYoEWYa-NjveK0hs=s64","userId":"10657160422125025312"}},"outputId":"345e22b1-f693-485f-e382-39297cf2a3eb"},"source":["import nltk\r\n","nltk.download('punkt')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Unzipping tokenizers/punkt.zip.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"qlBAJufyamW-"},"source":["train, test = train_test_split(df, test_size=0.3, random_state=42)\r\n","import nltk\r\n","from nltk.corpus import stopwords\r\n","def tokenize_text(text):\r\n","    tokens = []\r\n","    for sent in nltk.sent_tokenize(text):\r\n","        for word in nltk.word_tokenize(sent):\r\n","            if len(word) < 2:\r\n","                continue\r\n","            tokens.append(word.lower())\r\n","    return tokens\r\n","train_tagged = train.apply(\r\n","    lambda r: TaggedDocument(words=tokenize_text(r['text']), tags=[r.Category]), axis=1)\r\n","test_tagged = test.apply(\r\n","    lambda r: TaggedDocument(words=tokenize_text(r['text']), tags=[r.Category]), axis=1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N7E9SRp2a6kS","executionInfo":{"status":"ok","timestamp":1609950813257,"user_tz":-330,"elapsed":1753,"user":{"displayName":"Viren Kathiriya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVzqjQWWgJbKaLmG0OVHY6kjVbYoEWYa-NjveK0hs=s64","userId":"10657160422125025312"}},"outputId":"0628eb20-80eb-4a87-aba7-cf68c51b2b42"},"source":["train_tagged.values[30]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["TaggedDocument(words=['reuters', 'the', 'state', 'of', 'teas', 'won', 'at', 'least', 'temporary', 'victory', 'on', 'tuesday', 'in', 'its', 'bid', 'to', 'implement', 'controversial', 'voter', 'identification', 'law', 'when', 'federal', 'appeals', 'court', 'stayed', 'ruling', 'by', 'u.s.', 'district', 'court', 'judge', 'that', 'barred', 'its', 'enforcement', 'three-member', 'panel', 'of', 'the', 'u.s.', '5th', 'circuit', 'court', 'of', 'appeals', 'in', 'new', 'orleans', 'voted', '2-1', 'to', 'put', 'the', 'lower', 'court', 'judge', 'ruling', 'on', 'hold', 'while', 'it', 'considers', 'the', 'constitutionality', 'of', 'the', 'law', 'which', 'was', 'passed', 'this', 'year', 'by', 'the', 'state', 'republican-controlled', 'legislature', 'that', 'bill', 'was', 'meant', 'to', 'fi', 'elements', 'of', '2011', 'voter', 'id', 'measure', 'that', 'was', 'considered', 'one', 'of', 'the', 'strictest', 'in', 'the', 'united', 'states', 'and', 'subject', 'to', 'years', 'of', 'court', 'challenges', 'during', 'the', 'obama', 'administration', 'president', 'donald', 'trump', 'who', 'campaigned', 'on', 'cutting', 'voter', 'fraud', 'has', 'supported', 'teas', 'bid', 'to', 'require', 'that', 'voters', 'show', 'form', 'of', 'identification', 'the', 'state', 'has', 'made', 'strong', 'showing', 'that', 'it', 'is', 'likely', 'to', 'succeed', 'on', 'the', 'merits', 'of', 'the', 'case', 'judges', 'jennifer', 'elrod', 'and', 'jerry', 'smith', 'wrote', 'in', 'si-page', 'ruling', 'in', 'four-page', 'dissenting', 'opinion', 'judge', 'james', 'graves', 'wrote', 'that', 'if', 'the', '5th', 'circuit', 'was', 'going', 'to', 'take', 'up', 'the', 'case', 'it', 'should', 'have', 'stayed', 'the', 'entire', 'law', 'from', 'taking', 'effect', 'until', 'final', 'ruling', 'was', 'issued', 'lauren', 'ehrsam', 'spokeswoman', 'for', 'the', 'u.s.', 'department', 'of', 'justice', 'said', 'in', 'written', 'statement', 'we', 'are', 'pleased', 'that', 'the', 'fifth', 'circuit', 'has', 'stayed', 'the', 'injunction', 'and', 'allowed', 'teas', 'to', 'proceed', 'with', 'its', 'duly', 'enacted', 'voter', 'identification', 'laws.', 'preserving', 'the', 'integrity', 'of', 'the', 'ballot', 'is', 'vital', 'to', 'our', 'democracy', 'and', 'the', 'fifth', 'circuit', 'order', 'allows', 'teas', 'to', 'continue', 'to', 'fulfill', 'that', 'duty', 'as', 'this', 'case', 'moves', 'forward', 'ehrsam', 'said', 'teas', 'democratic', 'party', 'chairman', 'gilberto', 'hinojosa', 'could', 'not', 'be', 'reached', 'for', 'comment', 'on', 'the', 'ruling', 'on', 'tuesday', 'evening', 'hiojosa', 'has', 'previously', 'likened', 'the', 'voter', 'id', 'requirements', 'to', 'jim', 'crow-era', 'tactics', 'designed', 'to', 'keep', 'republican', 'lawmakers', 'in', 'power.critics', 'say', 'the', 'teas', 'law', 'and', 'similar', 'statutes', 'enacted', 'in', 'other', 'states', 'were', 'tailored', 'to', 'make', 'it', 'harder', 'for', 'minorities', 'and', 'immigrants', 'including', 'black', 'and', 'hispanic', 'voters', 'who', 'are', 'less', 'likely', 'to', 'have', 'the', 'authorized', 'ids', 'and', 'tend', 'to', 'favor', 'democrats', 'to', 'cast', 'ballots', 'backers', 'say', 'the', 'laws', 'are', 'necessary', 'to', 'prevent', 'voter', 'fraud', 'and', 'are', 'no', 'more', 'onerous', 'than', 'the', 'requirements', 'imposed', 'by', 'states', 'for', 'driving', 'motor', 'vehicle'], tags=['TRUE'])"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"id":"ODEP--acbJBn"},"source":["import multiprocessing\r\n","cores = multiprocessing.cpu_count()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RgsXHEdXbNan","executionInfo":{"status":"ok","timestamp":1609950828563,"user_tz":-330,"elapsed":6267,"user":{"displayName":"Viren Kathiriya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVzqjQWWgJbKaLmG0OVHY6kjVbYoEWYa-NjveK0hs=s64","userId":"10657160422125025312"}},"outputId":"30e2571a-15fc-4a66-cff3-50c64cb17854"},"source":["model_dbow = Doc2Vec(dm=0, vector_size=300, negative=5, hs=0, min_count=2, sample = 0, workers=cores)\r\n","model_dbow.build_vocab([x for x in tqdm(train_tagged.values)])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["100%|██████████| 3500/3500 [00:00<00:00, 1409376.34it/s]\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jLzGYJitbcSF","executionInfo":{"status":"ok","timestamp":1609950898346,"user_tz":-330,"elapsed":68233,"user":{"displayName":"Viren Kathiriya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVzqjQWWgJbKaLmG0OVHY6kjVbYoEWYa-NjveK0hs=s64","userId":"10657160422125025312"}},"outputId":"7f4f29d8-4fce-42ae-c770-2065a5d3a0e4"},"source":["for epoch in range(30):\r\n","    model_dbow.train(utils.shuffle([x for x in tqdm(train_tagged.values)]), total_examples=len(train_tagged.values), epochs=1)\r\n","    model_dbow.alpha -= 0.002\r\n","    model_dbow.min_alpha = model_dbow.alpha"],"execution_count":null,"outputs":[{"output_type":"stream","text":["100%|██████████| 3500/3500 [00:00<00:00, 354505.29it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 1225074.19it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 907970.31it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 1072712.02it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 659008.08it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 2359001.12it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 1788942.72it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 788106.73it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 719963.90it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 1883750.03it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 676906.16it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 2290896.38it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 743859.34it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 2082573.98it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 1670847.26it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 1110863.72it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 1330921.49it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 1853543.43it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 1781344.98it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 889754.77it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 829991.75it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 1827924.79it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 1871263.73it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 1731956.58it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 1332129.22it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 1380613.56it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 796055.75it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 2221895.57it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 978344.82it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 587108.62it/s]\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"a9xpD7h_bg1x"},"source":["def vec_for_learning(model, tagged_docs):\r\n","    sents = tagged_docs.values\r\n","    targets, regressors = zip(*[(doc.tags[0], model.infer_vector(doc.words, steps=20)) for doc in sents])\r\n","    return targets, regressors\r\n","def vec_for_learning(model, tagged_docs):\r\n","    sents = tagged_docs.values\r\n","    targets, regressors = zip(*[(doc.tags[0], model.infer_vector(doc.words, steps=20)) for doc in sents])\r\n","    return targets, regressors"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YAVSuNRvbtSy","executionInfo":{"status":"ok","timestamp":1609950989942,"user_tz":-330,"elapsed":72335,"user":{"displayName":"Viren Kathiriya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVzqjQWWgJbKaLmG0OVHY6kjVbYoEWYa-NjveK0hs=s64","userId":"10657160422125025312"}},"outputId":"6dac8af7-d0c8-49f9-9cf4-462dadbfe75c"},"source":["y_train, X_train = vec_for_learning(model_dbow, train_tagged)\r\n","y_test, X_test = vec_for_learning(model_dbow, test_tagged)\r\n","logreg = LogisticRegression(n_jobs=1, C=1e5)\r\n","logreg.fit(X_train, y_train)\r\n","y_pred = logreg.predict(X_test)\r\n","from sklearn.metrics import accuracy_score, f1_score\r\n","print('Testing accuracy %s' % accuracy_score(y_test, y_pred))\r\n","print('Testing F1 score: {}'.format(f1_score(y_test, y_pred, average='weighted')))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Testing accuracy 0.6446666666666667\n","Testing F1 score: 0.6447176849263372\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IRN1rnaMb25n","executionInfo":{"status":"ok","timestamp":1609951274558,"user_tz":-330,"elapsed":13197,"user":{"displayName":"Viren Kathiriya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVzqjQWWgJbKaLmG0OVHY6kjVbYoEWYa-NjveK0hs=s64","userId":"10657160422125025312"}},"outputId":"182b4b29-b365-4fc8-ca0c-b7d0f8a9cd0c"},"source":["model_dmm = Doc2Vec(dm=1, dm_mean=1, vector_size=300, window=10, negative=5, min_count=1, workers=5, alpha=0.065, min_alpha=0.065)\r\n","model_dmm.build_vocab([x for x in tqdm(train_tagged.values)])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["100%|██████████| 3500/3500 [00:00<00:00, 638319.16it/s]\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"75-ptVIMcDlX","executionInfo":{"status":"ok","timestamp":1609951396817,"user_tz":-330,"elapsed":118381,"user":{"displayName":"Viren Kathiriya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVzqjQWWgJbKaLmG0OVHY6kjVbYoEWYa-NjveK0hs=s64","userId":"10657160422125025312"}},"outputId":"5b87fe1b-b162-47e3-87e7-dc7200343fd3"},"source":["for epoch in range(30):\r\n","    model_dmm.train(utils.shuffle([x for x in tqdm(train_tagged.values)]), total_examples=len(train_tagged.values), epochs=1)\r\n","    model_dmm.alpha -= 0.002\r\n","    model_dmm.min_alpha = model_dmm.alpha"],"execution_count":null,"outputs":[{"output_type":"stream","text":["100%|██████████| 3500/3500 [00:00<00:00, 674201.52it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 756431.39it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 2315832.78it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 1019165.79it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 1337835.05it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 1256209.48it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 845966.92it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 1211726.29it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 544553.16it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 1669327.27it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 2396745.14it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 794032.02it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 686465.47it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 1839837.57it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 750552.89it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 1390420.91it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 2463924.81it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 1390947.89it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 1171219.40it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 944055.56it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 553213.14it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 1487040.52it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 2464338.43it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 2335358.57it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 653929.53it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 2366988.71it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 571898.55it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 2451989.98it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 790227.92it/s]\n","100%|██████████| 3500/3500 [00:00<00:00, 2358622.11it/s]\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TLJ3y-BacIl4","executionInfo":{"status":"ok","timestamp":1609951504113,"user_tz":-330,"elapsed":105825,"user":{"displayName":"Viren Kathiriya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVzqjQWWgJbKaLmG0OVHY6kjVbYoEWYa-NjveK0hs=s64","userId":"10657160422125025312"}},"outputId":"75819818-ee4b-4927-9582-ed84fbb4ac8d"},"source":["y_train, X_train = vec_for_learning(model_dmm, train_tagged)\r\n","y_test, X_test = vec_for_learning(model_dmm, test_tagged)\r\n","logreg.fit(X_train, y_train)\r\n","y_pred = logreg.predict(X_test)\r\n","print('Testing accuracy %s' % accuracy_score(y_test, y_pred))\r\n","print('Testing F1 score: {}'.format(f1_score(y_test, y_pred, average='weighted')))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Testing accuracy 0.888\n","Testing F1 score: 0.8870010429778816\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JI9CGxqacZtt","executionInfo":{"status":"ok","timestamp":1609951843566,"user_tz":-330,"elapsed":73739,"user":{"displayName":"Viren Kathiriya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVzqjQWWgJbKaLmG0OVHY6kjVbYoEWYa-NjveK0hs=s64","userId":"10657160422125025312"}},"outputId":"c35d1446-08d0-4399-ca7b-2d69b4d12507"},"source":["from sklearn.ensemble import GradientBoostingClassifier\r\n","from sklearn.ensemble import RandomForestClassifier \r\n","\r\n","y_train, X_train = vec_for_learning(model_dbow, train_tagged)\r\n","y_test, X_test = vec_for_learning(model_dbow, test_tagged)\r\n","gbc = GradientBoostingClassifier(random_state=0)  ## Testing accuracy 00.5913333333333334  Testing F1 score: 0.5908017072874595\r\n","regressor = RandomForestClassifier(n_estimators = 100)  ## Testing accuracy 0.592 Testing F1 score: 0.5920558626833505\r\n","logreg = LogisticRegression(n_jobs=1, C=1e5)  ## Testing accuracy 0.6153333333333333 Testing F1 score: 0.6153748907979519\r\n","logreg.fit(X_train, y_train)\r\n","y_pred = logreg.predict(X_test)\r\n","from sklearn.metrics import accuracy_score, f1_score\r\n","print('Testing accuracy %s' % accuracy_score(y_test, y_pred))\r\n","print('Testing F1 score: {}'.format(f1_score(y_test, y_pred, average='weighted')))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Testing accuracy 0.6153333333333333\n","Testing F1 score: 0.6153748907979519\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"u1av0_nRdcQN","executionInfo":{"status":"ok","timestamp":1609952645632,"user_tz":-330,"elapsed":110352,"user":{"displayName":"Viren Kathiriya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVzqjQWWgJbKaLmG0OVHY6kjVbYoEWYa-NjveK0hs=s64","userId":"10657160422125025312"}},"outputId":"2f5e1f84-f5b4-46d5-e1fc-469e10759eb4"},"source":["from sklearn.ensemble import GradientBoostingClassifier\r\n","from sklearn.ensemble import RandomForestClassifier \r\n","\r\n","y_train, X_train = vec_for_learning(model_dmm, train_tagged)\r\n","y_test, X_test = vec_for_learning(model_dmm, test_tagged)\r\n","gbc = GradientBoostingClassifier(random_state=0)  ## Testing accuracy 0.7553333333333333 Testing F1 score: 0.7458909011291194\r\n","regressor = RandomForestClassifier(n_estimators = 100) ## Testing accuracy 0.5973333333333334 Testing F1 score: 0.5836390599750682\r\n","logreg = LogisticRegression(n_jobs=1, C=1e5)  ## Testing accuracy 0.9093333333333333 Testing F1 score: 0.9087999053782094 \r\n","logreg.fit(X_train, y_train)\r\n","y_pred = logreg.predict(X_test)\r\n","from sklearn.metrics import accuracy_score, f1_score\r\n","print('Testing accuracy %s' % accuracy_score(y_test, y_pred))\r\n","print('Testing F1 score: {}'.format(f1_score(y_test, y_pred, average='weighted')))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Testing accuracy 0.5973333333333334\n","Testing F1 score: 0.5836390599750682\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"_5rEdKtke6f9"},"source":["Concatenate two models."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tw6oGUe6e7rt","executionInfo":{"status":"ok","timestamp":1609952753226,"user_tz":-330,"elapsed":3583,"user":{"displayName":"Viren Kathiriya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVzqjQWWgJbKaLmG0OVHY6kjVbYoEWYa-NjveK0hs=s64","userId":"10657160422125025312"}},"outputId":"aadbbabf-ee0f-49ac-d8e2-4ecdb30e5353"},"source":["!pip install testfixtures\r\n","from gensim.test.test_doc2vec import ConcatenatedDoc2Vec\r\n","new_model = ConcatenatedDoc2Vec([model_dbow, model_dmm])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: testfixtures in /usr/local/lib/python3.6/dist-packages (6.17.0)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"aE7MrMZReIjN"},"source":["def get_vectors(model, tagged_docs):\r\n","    sents = tagged_docs.values\r\n","    targets, regressors = zip(*[(doc.tags[0], model.infer_vector(doc.words, steps=20)) for doc in sents])\r\n","    return targets, regressors"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KBYYTRaqfDAg","executionInfo":{"status":"ok","timestamp":1609953735918,"user_tz":-330,"elapsed":191646,"user":{"displayName":"Viren Kathiriya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVzqjQWWgJbKaLmG0OVHY6kjVbYoEWYa-NjveK0hs=s64","userId":"10657160422125025312"}},"outputId":"8ca866eb-b607-4c18-e7ae-b1c1237dfd2a"},"source":["from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\r\n","y_train, X_train = get_vectors(new_model, train_tagged)\r\n","y_test, X_test = get_vectors(new_model, test_tagged)\r\n","gbc = GradientBoostingClassifier(random_state=0)  ## Testing accuracy 0.7926666666666666 Testing F1 score: 0.7865003357893532\r\n","regressor = RandomForestClassifier(n_estimators = 100) ## Testing accuracy  0.5773333333333334 Testing F1 score: 0.5159788446726573\r\n","logreg = LogisticRegression(n_jobs=1, C=1e5)  ## Testing accuracy 0.916 Testing F1 score: 0.9154329771337443\r\n","regressor.fit(X_train, y_train)\r\n","y_pred = regressor.predict(X_test)\r\n","from sklearn.metrics import accuracy_score, f1_score\r\n","print('Testing accuracy %s' % accuracy_score(y_test, y_pred))\r\n","print('Testing F1 score: {}'.format(f1_score(y_test, y_pred, average='weighted')))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Testing accuracy 0.588\n","Testing F1 score: 0.538406181724714\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"hwCBkt9iffSQ"},"source":[""],"execution_count":null,"outputs":[]}]}