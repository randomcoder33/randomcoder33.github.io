{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"PolitiFact Doc2Vec","provenance":[{"file_id":"1NWwy3ecM7BuruiTMIE_UdKROIxnj2Rek","timestamp":1610036695150},{"file_id":"1-m3FtG4CDG2B9FrQCl7FjLcmntryV3CP","timestamp":1609950462918}]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"PwD1a2ufXZjU","executionInfo":{"status":"ok","timestamp":1610036732443,"user_tz":-330,"elapsed":2614,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}}},"source":["import pandas as pd\r\n","import numpy as np\r\n","from tqdm import tqdm\r\n","tqdm.pandas(desc=\"progress-bar\")\r\n","from gensim.models import Doc2Vec\r\n","from sklearn import utils\r\n","from sklearn.model_selection import train_test_split\r\n","import gensim\r\n","from sklearn.linear_model import LogisticRegression\r\n","from gensim.models.doc2vec import TaggedDocument\r\n","import re\r\n","import seaborn as sns\r\n","import matplotlib.pyplot as plt"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"ick8sCweXaxJ","executionInfo":{"status":"ok","timestamp":1610037160551,"user_tz":-330,"elapsed":1111,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}}},"source":["from google.colab import files\r\n","files.upload()\r\n","\r\n","!pip install -q kaggle\r\n","!mkdir -p ~/.kaggle\r\n","!cp kaggle.json ~/.kaggle/\r\n","!chmod 600 /root/.kaggle/kaggle.json\r\n","!kaggle datasets download -d virenkathiriya/politifact\r\n","\r\n","import zipfile\r\n","with zipfile.ZipFile('./politifact.zip', 'r') as zip_ref:\r\n","    zip_ref.extractall('./')\r\n","\r\n","df=pd.read_csv('Politifact_.csv')\r\n","df.head()\r\n","\r\n","df = df[['text','is_fake']]\r\n","df = df[pd.notnull(df['text'])]\r\n","# # df.rename(columns = {'Consumer complaint narrative':'narrative'}, inplace = True)\r\n","# df"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"00J00wgpZ5fd","executionInfo":{"status":"ok","timestamp":1610037196304,"user_tz":-330,"elapsed":1068,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}},"outputId":"5d74036b-4259-498f-9dbd-abfcef26e6d7"},"source":["df.shape\r\n","df.index = range(len(df))\r\n","df['text'].apply(lambda x: len(x.split(' '))).sum()"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1268778"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":352},"id":"wG-zfoo3aGy3","executionInfo":{"status":"ok","timestamp":1610037210110,"user_tz":-330,"elapsed":973,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}},"outputId":"31001837-dbaf-49ed-cedf-50771e53919d"},"source":["cnt_pro = df['is_fake'].value_counts()\r\n","plt.figure(figsize=(12,4))\r\n","sns.barplot(cnt_pro.index, cnt_pro.values, alpha=0.8)\r\n","plt.ylabel('Number of Occurrences', fontsize=12)\r\n","plt.xlabel('is_fake', fontsize=12)\r\n","plt.xticks(rotation=90)\r\n","plt.show();"],"execution_count":9,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n","  FutureWarning\n"],"name":"stderr"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 864x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tCoDfqgvaanF","executionInfo":{"status":"ok","timestamp":1610037228499,"user_tz":-330,"elapsed":1005,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}},"outputId":"15b34cf4-38d4-447a-ac41-2b0d15513bea"},"source":["def print_complaint(index):\r\n","    example = df[df.index == index][['text', 'is_fake']].values[0]\r\n","    if len(example) > 0:\r\n","        print(example[0])\r\n","        print('Category:', example[1])\r\n","print_complaint(12)"],"execution_count":10,"outputs":[{"output_type":"stream","text":["BREAKING!\n","\n","Liberal rag Huffington Post is really running with this story from The Washington Post about the CIA “confirming” Russian interference in the presidential election.\n","\n","They’re saying if 100% true, the courts can PUT HILLARY IN THE WHITE HOUSE!\n","\n","Scary!\n","\n","From HuffPo:\n","\n","A 1995 federal court ruling out of Pennsylvania may offer some clues to Clinton supporters as to possible legal authority for removing an elected official from office and replacing them with their erstwhile opponent.\n","\n","In light of late-breaking reports Friday evening that Russians interfered with the 2016 presidential election to assist Donald Trump’s victory, Clinton supporters are furiously in pursuit of remedies.\n","\n","At 10:45 p.m. Friday evening, the Washington Post broke an explosive story alleging that Russians had interfered with the 2016 presidential election in order to assist Donald Trump in a victory over democratic candidate Hillary Clinton. The story reveals that a CIA assessment detailing this conclusion had been presented to President Obama and top congressional leaders last week.\n","\n","The development has Clinton supporters and other concerned Americans confused and hot in pursuit of potential remedies. No clear constitutional remedy exists to halt the certification of the outcome. Article II of the U.S. Constitution vests Congress with the power to determine the date by which the Electoral College will cast their votes, presently set for December 19. In recent weeks, a massive online movement asking members of the Electoral College to become “faithless” or “conscientious” electors and to vote for Clinton instead of Trump has garnered national attention.\n","\n","The electors would be well within their constitutional authority to do so, say groups like Hamilton’s Electors, which claims that the purpose of the Electoral College is to prevent demagogues like Mr. Trump from assuming the nation’s highest office. A petition urging the Electoral College to make Hillary Clinton president has gained nearly 5 million signatures.\n","\n","Proponents of this strategy are concerned, with good reason, about the likelihood it will succeed. With Donald Trump having won 306 Electoral College votes, 37 Republican electors would need to switch their votes to Clinton, a tall order, and in the event that no one candidate has 270 electoral votes, the decision would go to the Republican-controlled House of Representatives.\n","Category: True\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"1X55dUL2ar1B"},"source":["Text Preprocessing"]},{"cell_type":"code","metadata":{"id":"gDZ-glolat81","executionInfo":{"status":"ok","timestamp":1610037234953,"user_tz":-330,"elapsed":1311,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}}},"source":["from bs4 import BeautifulSoup\r\n","def cleanText(text):\r\n","    text = BeautifulSoup(text, \"lxml\").text\r\n","    text = re.sub(r'\\|\\|\\|', r' ', text) \r\n","    text = re.sub(r'http\\S+', r'<URL>', text)\r\n","    text = text.lower()\r\n","    text = text.replace('x', '')\r\n","    return text\r\n","df['text'] = df['text'].apply(cleanText)"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5Sph0ZDxa9qO","executionInfo":{"status":"ok","timestamp":1610037238846,"user_tz":-330,"elapsed":2097,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}},"outputId":"3455f57c-101d-4938-c04c-3666dbea312e"},"source":["import nltk\r\n","nltk.download('punkt')"],"execution_count":12,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Unzipping tokenizers/punkt.zip.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"id":"qlBAJufyamW-","executionInfo":{"status":"ok","timestamp":1610037270665,"user_tz":-330,"elapsed":14617,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}}},"source":["train, test = train_test_split(df, test_size=0.3, random_state=42)\r\n","import nltk\r\n","from nltk.corpus import stopwords\r\n","def tokenize_text(text):\r\n","    tokens = []\r\n","    for sent in nltk.sent_tokenize(text):\r\n","        for word in nltk.word_tokenize(sent):\r\n","            if len(word) < 2:\r\n","                continue\r\n","            tokens.append(word.lower())\r\n","    return tokens\r\n","train_tagged = train.apply(\r\n","    lambda r: TaggedDocument(words=tokenize_text(r['text']), tags=[r.is_fake]), axis=1)\r\n","test_tagged = test.apply(\r\n","    lambda r: TaggedDocument(words=tokenize_text(r['text']), tags=[r.is_fake]), axis=1)"],"execution_count":14,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N7E9SRp2a6kS","executionInfo":{"status":"ok","timestamp":1610037278383,"user_tz":-330,"elapsed":930,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}},"outputId":"0d48edc1-d635-4f8f-fcb9-6f4d4ff8ee2b"},"source":["train_tagged.values[30]"],"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["TaggedDocument(words=['fo', 'news', 'host', 'sandra', 'smith', 'on', 'wednesday', 'linked', 'customer', 'who', 'was', 'dragged', 'off', 'united', 'airlines', 'flight', 'to', 'government', 'overregulation', 'of', 'the', 'airline', 'industry', 'during', 'fo', 'news', 'discussion', 'about', 'the', 'recent', 'united', 'airlines', 'public', 'relations', 'debacle', 'smith', 'noted', 'that', 'lawmakers', 'were', 'calling', 'for', 'an', 'investigation', 'and', 'that', 'the', 'airline', 'lost', 'millions', 'in', 'stock', 'value', 'airlines', 'disgust', 'me', 'fo', 'news', 'contributor', 'geraldo', 'rivera', 'told', 'smith', 'they', 'do', 'everything', 'to', 'maimize', 'profit.', 'there', 'nothing', 'wrong', 'with', 'maimizing', 'profit', 'smith', 'insisted', 'that', 'what', 'they', 're', 'supposed', 'to', 'do', 'as', 'publicly', 'traded', 'airline.', 'but', 'when', 'you', 'book', 'and', 'overbook', 'rivera', 'replied', 'paid', 'passengers', 'have', 'to', 'give', 'up', 'their', 'seats', 'this', 'is', 'not', 'business', 'this', 'is', 'reckless', 'foolhardy', 'imposition', 'of', 'your', 'own', 'personal', 'convenience', 'what', 'happened', 'to', 'the', 'customer', 'is', 'always', 'right', 'smith', 'continued', 'but', 'look', 'get', 'where', 'you', 're', 'coming', 'from', 'with', 'this', 'but', 'at', 'the', 'end', 'of', 'the', 'day', 'we', 're', 'talking', 'here', 'about', 'an', 'airline', 'company', 'that', 'eists', 'solely', 'for', 'the', 'purpose', 'of', 'transporting', 'passengers', 'from', 'one', 'place', 'in', 'the', 'country', 'to', 'another', 'if', 'you', 'just', 'consider', 'the', 'fact', 'that', '15', 'or', 'so', 'years', 'ago', 'we', 'had', 'two', 'airplanes', 'crash', 'into', 'the', 'world', 'trade', 'center', 'in', 'new', 'york', 'city', 'think', 'you', 'll', 'understand', 'that', 'they', 'were', 'right', 'to', 'be', 'edgy', 'and', 'that', 'goes', 'especially', 'in', 'situation', 'in', 'which', 'the', 'passenger', 'in', 'question', 'was', 'not', 'genuine', 'american', 'as', 'matter', 'of', 'fact', 'if', 'you', 'take', 'look', 'at', 'the', 'video', 'of', 'what', 'happened', 'on', 'the', 'plane', 'it', 'obvious', 'that', 'his', 'behavior', 'suggests', 'that', 'he', 'from', 'another', 'part', 'of', 'the', 'world', 'and', 'that', 'that.', 'rivera', 'asked', 'you', 'can', 'possibly', 'be', 'serious', 'sandra', 'are', 'you', 'actually', 'saying', 'that', 'the', 'company', 'was', 'right', 'to', 'first', 'overbook', 'the', 'flight', 'and', 'then', 'secondly', 'call', 'security', 'to', 'beat', 'up', 'the', 'man', 'simple', 'because', 'his', 'behavior', 'suggested', 'he', 'wasn', 'true', 'american', 'and', 'what', 'does', 'that', 'even', 'mean', 'again', 'smith', 'wouldn', 'be', 'confused', 'look', 'geraldo', 'at', 'the', 'end', 'of', 'the', 'day', 'you', 'have', 'to', 'understand', 'the', 'fact', 'that', 'the', 'moment', 'americans', 'see', 'non-white', 'person', 'sitting', 'net', 'to', 'them', 'on', 'plane', 'they', 'get', 'chills', 'some', 'of', 'them', 'get', 'outright', 'angry', 'as', 'well', 'and', 'while', 'that', 'not', 'ideal', 'it', 'certainly', 'understandable', 'we', 'can', 'blame', 'people', 'for', 'fearing', 'for', 'their', 'lives', 'because', 'of', 'the', 'terrible', 'tragedy', 'this', 'country', 'endured', 'during', '9/11.', 'what', 'more', 'would', 'even', 'go', 'so', 'far', 'as', 'to', 'say', 'that', 'the', 'man', 'had', 'it', 'coming', 'for', 'one', 'simple', 'reason', 'if', 'that', 'had', 'been', 'white', 'person', 'they', 'would', 'have', 'likely', 'stepped', 'out', 'of', 'the', 'plane', 'and', 'waited', 'for', 'the', 'net', 'flight', 'not', 'to', 'mention', 'that', 'they', 'would', 'probably', 'also', 'have', 'been', 'compensated', 'for', 'the', 'inconvenience', 'in', 'some', 'way', 'or', 'another', 'instead', 'since', 'this', 'guy', 'wasn', 'white', 'his', 'reaction', 'was', 'also', 'different', 'from', 'that', 'of', 'white', 'person', 'which', 'is', 'why', 'he', 'refused', 'to', 'give', 'up', 'his', 'seat', 'if', 'he', 'done', 'that', 'everything', 'would', 'have', 'gone', 'more', 'smoothly', 'and', 'without', 'incident', 'this', 'way', 'because', 'he', 'was', 'stubborn', 'he', 'ended', 'up', 'getting', 'the', 'short', 'end', 'of', 'the', 'stick', 'that', 'just', 'not', 'how', 'white', 'people', 'behave', 'and', 'non-whites', 'in', 'this', 'country', 'need', 'to', 'learn', 'that', 'we', 're', 'more', 'civilized', 'than', 'the', 'rest', 'which', 'is', 'why', 'we', 're', 'at', 'the', 'top', 'of', 'the', 'food', 'chain', 'the', 'guy', 'had', 'it', 'coming', 'end', 'of', 'story', 'she', 'concluded'], tags=[True])"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"id":"ODEP--acbJBn","executionInfo":{"status":"ok","timestamp":1610037280915,"user_tz":-330,"elapsed":1045,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}}},"source":["import multiprocessing\r\n","cores = multiprocessing.cpu_count()"],"execution_count":16,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RgsXHEdXbNan","executionInfo":{"status":"ok","timestamp":1610037289277,"user_tz":-330,"elapsed":4522,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}},"outputId":"ffbc04b4-fc4b-4395-957d-b7f8e6bfee6d"},"source":["model_dbow = Doc2Vec(dm=0, vector_size=300, negative=5, hs=0, min_count=2, sample = 0, workers=cores)\r\n","model_dbow.build_vocab([x for x in tqdm(train_tagged.values)])"],"execution_count":17,"outputs":[{"output_type":"stream","text":["100%|██████████| 621/621 [00:00<00:00, 720116.89it/s]\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jLzGYJitbcSF","executionInfo":{"status":"ok","timestamp":1610037323495,"user_tz":-330,"elapsed":30944,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}},"outputId":"a3f977c9-36ef-4bf2-a64c-2c796e6066a9"},"source":["for epoch in range(30):\r\n","    model_dbow.train(utils.shuffle([x for x in tqdm(train_tagged.values)]), total_examples=len(train_tagged.values), epochs=1)\r\n","    model_dbow.alpha -= 0.002\r\n","    model_dbow.min_alpha = model_dbow.alpha"],"execution_count":18,"outputs":[{"output_type":"stream","text":["100%|██████████| 621/621 [00:00<00:00, 101756.56it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1253446.96it/s]\n","100%|██████████| 621/621 [00:00<00:00, 147773.90it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1180717.49it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1294564.01it/s]\n","100%|██████████| 621/621 [00:00<00:00, 409087.92it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1351667.25it/s]\n","100%|██████████| 621/621 [00:00<00:00, 155883.82it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1312834.06it/s]\n","100%|██████████| 621/621 [00:00<00:00, 155233.49it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1276795.48it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1252844.05it/s]\n","100%|██████████| 621/621 [00:00<00:00, 144623.14it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1524085.89it/s]\n","100%|██████████| 621/621 [00:00<00:00, 714585.13it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1161758.60it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1200858.82it/s]\n","100%|██████████| 621/621 [00:00<00:00, 272084.28it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1117881.02it/s]\n","100%|██████████| 621/621 [00:00<00:00, 167858.66it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1242090.03it/s]\n","100%|██████████| 621/621 [00:00<00:00, 347010.76it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1301680.55it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1306250.14it/s]\n","100%|██████████| 621/621 [00:00<00:00, 723517.44it/s]\n","100%|██████████| 621/621 [00:00<00:00, 771066.54it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1159689.57it/s]\n","100%|██████████| 621/621 [00:00<00:00, 704153.23it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1092559.89it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1183399.72it/s]\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"a9xpD7h_bg1x","executionInfo":{"status":"ok","timestamp":1610037326976,"user_tz":-330,"elapsed":1007,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}}},"source":["def vec_for_learning(model, tagged_docs):\r\n","    sents = tagged_docs.values\r\n","    targets, regressors = zip(*[(doc.tags[0], model.infer_vector(doc.words, steps=20)) for doc in sents])\r\n","    return targets, regressors\r\n","def vec_for_learning(model, tagged_docs):\r\n","    sents = tagged_docs.values\r\n","    targets, regressors = zip(*[(doc.tags[0], model.infer_vector(doc.words, steps=20)) for doc in sents])\r\n","    return targets, regressors"],"execution_count":19,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YAVSuNRvbtSy","executionInfo":{"status":"ok","timestamp":1609950989942,"user_tz":-330,"elapsed":72335,"user":{"displayName":"Viren Kathiriya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVzqjQWWgJbKaLmG0OVHY6kjVbYoEWYa-NjveK0hs=s64","userId":"10657160422125025312"}},"outputId":"6dac8af7-d0c8-49f9-9cf4-462dadbfe75c"},"source":["y_train, X_train = vec_for_learning(model_dbow, train_tagged)\r\n","y_test, X_test = vec_for_learning(model_dbow, test_tagged)\r\n","logreg = LogisticRegression(n_jobs=1, C=1e5)\r\n","logreg.fit(X_train, y_train)\r\n","y_pred = logreg.predict(X_test)\r\n","from sklearn.metrics import accuracy_score, f1_score\r\n","print('Testing accuracy %s' % accuracy_score(y_test, y_pred))\r\n","print('Testing F1 score: {}'.format(f1_score(y_test, y_pred, average='weighted')))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Testing accuracy 0.6446666666666667\n","Testing F1 score: 0.6447176849263372\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IRN1rnaMb25n","executionInfo":{"status":"ok","timestamp":1610037346553,"user_tz":-330,"elapsed":8057,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}},"outputId":"69fcf3cf-dd9e-4032-b572-9964692d9212"},"source":["model_dmm = Doc2Vec(dm=1, dm_mean=1, vector_size=300, window=10, negative=5, min_count=1, workers=5, alpha=0.065, min_alpha=0.065)\r\n","model_dmm.build_vocab([x for x in tqdm(train_tagged.values)])"],"execution_count":20,"outputs":[{"output_type":"stream","text":["100%|██████████| 621/621 [00:00<00:00, 1031549.62it/s]\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"75-ptVIMcDlX","executionInfo":{"status":"ok","timestamp":1610037408120,"user_tz":-330,"elapsed":60344,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}},"outputId":"60abdbcf-29ed-4ed8-bd3f-9546b5e4131b"},"source":["for epoch in range(30):\r\n","    model_dmm.train(utils.shuffle([x for x in tqdm(train_tagged.values)]), total_examples=len(train_tagged.values), epochs=1)\r\n","    model_dmm.alpha -= 0.002\r\n","    model_dmm.min_alpha = model_dmm.alpha"],"execution_count":21,"outputs":[{"output_type":"stream","text":["100%|██████████| 621/621 [00:00<00:00, 115082.52it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1630972.31it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1058375.78it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1283085.12it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1296497.15it/s]\n","100%|██████████| 621/621 [00:00<00:00, 228880.74it/s]\n","100%|██████████| 621/621 [00:00<00:00, 293317.88it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1186094.16it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1237369.49it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1593065.92it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1199752.55it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1074087.75it/s]\n","100%|██████████| 621/621 [00:00<00:00, 665643.44it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1639183.63it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1424870.23it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1140894.78it/s]\n","100%|██████████| 621/621 [00:00<00:00, 483508.96it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1586274.53it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1308875.77it/s]\n","100%|██████████| 621/621 [00:00<00:00, 307443.67it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1214861.37it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1166441.01it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1009950.67it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1795081.17it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1588209.01it/s]\n","100%|██████████| 621/621 [00:00<00:00, 509220.49it/s]\n","100%|██████████| 621/621 [00:00<00:00, 212955.83it/s]\n","100%|██████████| 621/621 [00:00<00:00, 376668.52it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1482448.94it/s]\n","100%|██████████| 621/621 [00:00<00:00, 1043953.02it/s]\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TLJ3y-BacIl4","executionInfo":{"status":"ok","timestamp":1609951504113,"user_tz":-330,"elapsed":105825,"user":{"displayName":"Viren Kathiriya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVzqjQWWgJbKaLmG0OVHY6kjVbYoEWYa-NjveK0hs=s64","userId":"10657160422125025312"}},"outputId":"75819818-ee4b-4927-9582-ed84fbb4ac8d"},"source":["y_train, X_train = vec_for_learning(model_dmm, train_tagged)\r\n","y_test, X_test = vec_for_learning(model_dmm, test_tagged)\r\n","logreg.fit(X_train, y_train)\r\n","y_pred = logreg.predict(X_test)\r\n","print('Testing accuracy %s' % accuracy_score(y_test, y_pred))\r\n","print('Testing F1 score: {}'.format(f1_score(y_test, y_pred, average='weighted')))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Testing accuracy 0.888\n","Testing F1 score: 0.8870010429778816\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JI9CGxqacZtt","executionInfo":{"status":"ok","timestamp":1609951843566,"user_tz":-330,"elapsed":73739,"user":{"displayName":"Viren Kathiriya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVzqjQWWgJbKaLmG0OVHY6kjVbYoEWYa-NjveK0hs=s64","userId":"10657160422125025312"}},"outputId":"c35d1446-08d0-4399-ca7b-2d69b4d12507"},"source":["from sklearn.ensemble import GradientBoostingClassifier\r\n","from sklearn.ensemble import RandomForestClassifier \r\n","\r\n","y_train, X_train = vec_for_learning(model_dbow, train_tagged)\r\n","y_test, X_test = vec_for_learning(model_dbow, test_tagged)\r\n","gbc = GradientBoostingClassifier(random_state=0)  ## Testing accuracy 00.5913333333333334  Testing F1 score: 0.5908017072874595\r\n","regressor = RandomForestClassifier(n_estimators = 100)  ## Testing accuracy 0.592 Testing F1 score: 0.5920558626833505\r\n","logreg = LogisticRegression(n_jobs=1, C=1e5)  ## Testing accuracy 0.6153333333333333 Testing F1 score: 0.6153748907979519\r\n","logreg.fit(X_train, y_train)\r\n","y_pred = logreg.predict(X_test)\r\n","from sklearn.metrics import accuracy_score, f1_score\r\n","print('Testing accuracy %s' % accuracy_score(y_test, y_pred))\r\n","print('Testing F1 score: {}'.format(f1_score(y_test, y_pred, average='weighted')))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Testing accuracy 0.6153333333333333\n","Testing F1 score: 0.6153748907979519\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"u1av0_nRdcQN","executionInfo":{"status":"ok","timestamp":1609952645632,"user_tz":-330,"elapsed":110352,"user":{"displayName":"Viren Kathiriya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgVzqjQWWgJbKaLmG0OVHY6kjVbYoEWYa-NjveK0hs=s64","userId":"10657160422125025312"}},"outputId":"2f5e1f84-f5b4-46d5-e1fc-469e10759eb4"},"source":["from sklearn.ensemble import GradientBoostingClassifier\r\n","from sklearn.ensemble import RandomForestClassifier \r\n","\r\n","y_train, X_train = vec_for_learning(model_dmm, train_tagged)\r\n","y_test, X_test = vec_for_learning(model_dmm, test_tagged)\r\n","gbc = GradientBoostingClassifier(random_state=0)  ## Testing accuracy 0.7553333333333333 Testing F1 score: 0.7458909011291194\r\n","regressor = RandomForestClassifier(n_estimators = 100) ## Testing accuracy 0.5973333333333334 Testing F1 score: 0.5836390599750682\r\n","logreg = LogisticRegression(n_jobs=1, C=1e5)  ## Testing accuracy 0.9093333333333333 Testing F1 score: 0.9087999053782094 \r\n","logreg.fit(X_train, y_train)\r\n","y_pred = logreg.predict(X_test)\r\n","from sklearn.metrics import accuracy_score, f1_score\r\n","print('Testing accuracy %s' % accuracy_score(y_test, y_pred))\r\n","print('Testing F1 score: {}'.format(f1_score(y_test, y_pred, average='weighted')))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Testing accuracy 0.5973333333333334\n","Testing F1 score: 0.5836390599750682\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"_5rEdKtke6f9"},"source":["Concatenate two models."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tw6oGUe6e7rt","executionInfo":{"status":"ok","timestamp":1610037428185,"user_tz":-330,"elapsed":3638,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}},"outputId":"898d7b10-fcfd-4948-c073-f8185e2dbb41"},"source":["!pip install testfixtures\r\n","from gensim.test.test_doc2vec import ConcatenatedDoc2Vec\r\n","new_model = ConcatenatedDoc2Vec([model_dbow, model_dmm])"],"execution_count":22,"outputs":[{"output_type":"stream","text":["Collecting testfixtures\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/f7/82/7d7710234bfd18b69a21f65d77c55618e16a80bc333801c0f4dbbfb7324c/testfixtures-6.17.0-py2.py3-none-any.whl (95kB)\n","\r\u001b[K     |███▌                            | 10kB 14.5MB/s eta 0:00:01\r\u001b[K     |███████                         | 20kB 20.6MB/s eta 0:00:01\r\u001b[K     |██████████▍                     | 30kB 11.1MB/s eta 0:00:01\r\u001b[K     |█████████████▉                  | 40kB 5.6MB/s eta 0:00:01\r\u001b[K     |█████████████████▎              | 51kB 4.5MB/s eta 0:00:01\r\u001b[K     |████████████████████▊           | 61kB 4.4MB/s eta 0:00:01\r\u001b[K     |████████████████████████▏       | 71kB 4.8MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▋    | 81kB 5.2MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████ | 92kB 4.8MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 102kB 3.7MB/s \n","\u001b[?25hInstalling collected packages: testfixtures\n","Successfully installed testfixtures-6.17.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"aE7MrMZReIjN","executionInfo":{"status":"ok","timestamp":1610037432414,"user_tz":-330,"elapsed":1274,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}}},"source":["def get_vectors(model, tagged_docs):\r\n","    sents = tagged_docs.values\r\n","    targets, regressors = zip(*[(doc.tags[0], model.infer_vector(doc.words, steps=20)) for doc in sents])\r\n","    return targets, regressors"],"execution_count":23,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KBYYTRaqfDAg","executionInfo":{"status":"ok","timestamp":1610037924213,"user_tz":-330,"elapsed":85585,"user":{"displayName":"Raj Shah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhDVGHum7KIbSimsUZJrcJsQLSkkbO8X7rDEabX7w=s64","userId":"18235720783077995226"}},"outputId":"38e03d00-360b-459b-9ebf-bd5bfd3ae5db"},"source":["from sklearn.ensemble import GradientBoostingClassifier\r\n","from sklearn.ensemble import RandomForestClassifier \r\n","from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\r\n","y_train, X_train = get_vectors(new_model, train_tagged)\r\n","y_test, X_test = get_vectors(new_model, test_tagged)\r\n","gbc = GradientBoostingClassifier(random_state=0)  ## Testing accuracy 0.7790262172284644 Testing F1 score: 0.7805891214977627\r\n","regressor = RandomForestClassifier(n_estimators = 100) ## Testing accuracy  0.7078651685393258 Testing F1 score: 0.6803793645040473\r\n","logreg = LogisticRegression(n_jobs=1, C=1e5)  ## Testing accuracy 0.8127340823970037 Testing F1 score: 0.813728163354957\r\n","logreg.fit(X_train, y_train)\r\n","y_pred = logreg.predict(X_test)\r\n","from sklearn.metrics import accuracy_score, f1_score\r\n","print('Testing accuracy %s' % accuracy_score(y_test, y_pred))\r\n","print('Testing F1 score: {}'.format(f1_score(y_test, y_pred, average='weighted')))"],"execution_count":27,"outputs":[{"output_type":"stream","text":["Testing accuracy 0.8127340823970037\n","Testing F1 score: 0.813728163354957\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"hwCBkt9iffSQ"},"source":[""],"execution_count":null,"outputs":[]}]}